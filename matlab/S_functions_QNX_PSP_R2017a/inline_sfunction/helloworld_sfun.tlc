%% file : helloworld_sfun.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for helloworld_sfun
%% 
%% Simulink version      : 8.9 (R2017a) 16-Feb-2017
%% TLC file generated on : 17-May-2017 10:40:28

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'helloworld_sfun';
     def.OutputFcnSpec = 'double y1 = printValue(double u1)';
     def.StartFcnSpec = 'printValueInit(void)';
     def.TerminateFcnSpec = 'printValueTerm(void)';
     def.HeaderFiles = {'hello_world.h'};
     def.SourceFiles = {'hello_world.c'};
     def.Options.useTlcWithAccel = false;
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements helloworld_sfun "C"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %<LibAddToCommonIncludes("hello_world.h")>
    %<SLibAddToStaticSources("hello_world.c")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %<LibBlockSetIsExpressionCompliant(block)>
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %% 
    printValueInit();
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if !LibBlockOutputSignalIsExpr(0)
        %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
        %assign u1_val = LibBlockInputSignal(0, "", "", 0)
        %% 
        %<y1_val> = printValue(%<u1_val>);
    %endif
%endfunction

%% Function: BlockOutputSignal ============================================
%function BlockOutputSignal (block,system,portIdx,ucv,lcv,idx,retType) void
    %assign u1_val = LibBlockInputSignal(0, "", "", 0)
    %% 
    %switch retType
      %case "Signal"
        %if portIdx == 0
          %return "printValue(%<u1_val>)"
        %else
          %assign errTxt = "Block output port index not supported: %<portIdx>"
          %<LibBlockReportError(block,errTxt)>
        %endif
      %default
        %assign errTxt = "Unsupported return type: %<retType>"
        %<LibBlockReportError(block,errTxt)>
    %endswitch
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %% 
    printValueTerm();
%endfunction

%% [EOF]
